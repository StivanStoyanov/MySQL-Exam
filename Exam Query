#Section 1: Data Definition Language (DDL) – 40 pts
#01. Table Design

CREATE TABLE `countries`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(40) NOT NULL UNIQUE
);

CREATE TABLE `cities`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(40) NOT NULL UNIQUE,
    `population` INT,
    `country_id` INT NOT NULL,
    CONSTRAINT fk_country_id
    FOREIGN KEY (`country_id`) REFERENCES `countries`(`id`)
);

CREATE TABLE `universities`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(60) NOT NULL UNIQUE,
    `address` VARCHAR(80) NOT NULL UNIQUE,
    `tuition_fee` DECIMAL(19, 2) NOT NULL,
    `number_of_staff` INT,
    `city_id` INT,
    CONSTRAINT fk_city_id
    FOREIGN KEY (`city_id`) REFERENCES `cities`(`id`)
);

CREATE TABLE `students`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `first_name` VARCHAR(40) NOT NULL,
    `last_name` VARCHAR(40) NOT NULL,
    `age` INT,
    `phone` VARCHAR(20) NOT NULL UNIQUE,
    `email` VARCHAR(255) NOT NULL UNIQUE,
    `is_graduated` TINYINT(1) NOT NULL,
    `city_id` INT,
    CONSTRAINT fk_students_city_id
    FOREIGN KEY (`city_id`) REFERENCES `cities`(`id`)
);

CREATE TABLE `courses`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(40) NOT NULL UNIQUE,
    `duration_hours` DECIMAL(19, 2),
    `start_date` DATE,
    `teacher_name` VARCHAR(60) NOT NULL UNIQUE,
    `description` TEXT,
    `university_id` INT,
    CONSTRAINT fk_university_id
    FOREIGN KEY (`university_id`) REFERENCES `universities`(`id`)
);

CREATE TABLE `students_courses`(
	`grade` DECIMAL(19, 2) NOT NULL,
    `student_id` INT,
	`course_id` INT,
    CONSTRAINT fk_student_course_id
    FOREIGN KEY (`student_id`) REFERENCES `students` (`id`),
    CONSTRAINT fk_courses_students_id
    FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`)
);

#Section 2: Data Manipulation Language (DML) – 30 pts
#02. Insert

INSERT INTO `courses` (`name`, `duration_hours`, `start_date`, `teacher_name`, `description`, `university_id`)
	SELECT (CONCAT(`teacher_name`, ' ', 'course')),
			(CHAR_LENGTH(`name`) / 10),
            (`start_date` + 5),
            (REVERSE(`teacher_name`)),
            (CONCAT('Course',' ', `teacher_name`, REVERSE(`description`))),
            (DAY(`start_date`))
	FROM `courses`
    WHERE `id` <= 5;

#03. Update

UPDATE `universities`
SET `tuition_fee` = `tuition_fee` + 300
WHERE `id` BETWEEN 5 AND 12;


#04. Delete
DELETE u FROM `universities` AS u
WHERE u.`number_of_staff` IS NULL;

#Section 3: Querying – 50 pts
#05. Cities

SELECT * FROM `cities`
ORDER BY `population` DESC;

#06. Students age
SELECT `first_name`, `last_name`, `age`, `phone`, `email`
FROM `students`
WHERE `age` > 20
ORDER BY `first_name` DESC, `email`, `id`
LIMIT 10;

#07. New students
SELECT CONCAT(`first_name`, ' ', `last_name`) AS full_name,
		SUBSTRING(CONCAT(`first_name`, '.', LOWER(`last_name`)), 2, 10) AS 'username',
        (REVERSE(`phone`)) AS 'password'
        #COUNT(course_id)
        FROM `students` AS s
LEFT JOIN `students_courses` AS sc ON s.`id` = sc.`student_id`
GROUP BY s.`id`
HAVING COUNT(`course_id`) < 1
ORDER BY `password` DESC;

#08. Students count
SELECT (COUNT(*)) AS 'students_count',
		(u.`name`) AS 'university_name'
FROM `students_courses` AS sc
JOIN `courses` AS c ON sc.`course_id` = c.`id`
JOIN `universities` AS u ON c.`university_id` = u.`id`
GROUP BY u.`name`
HAVING `students_count` > 7
ORDER BY `students_count` DESC, `university_name` DESC;

#09. Price rankings

SELECT (u.`name`) AS 'university_name',
		(c.`name`) AS 'city_name',
        `address`,
        CASE
		WHEN u.`tuition_fee` < 800 THEN 'cheap'
		WHEN u.`tuition_fee` < 1200 THEN 'normal'
		WHEN u.`tuition_fee` < 2500 THEN 'high'
        ELSE 'expensive'
        END AS 'price_rank',
        `tuition_fee`
FROM `universities` AS u
JOIN `cities` AS c on u.`city_id` = c.`id`
ORDER BY `tuition_fee`;

#Section 4: Programmability – 30 pts
#10. Average grades
DELIMITER $$
CREATE FUNCTION udf_average_alumni_grade_by_course_name(course_name VARCHAR(60))
RETURNS DECIMAL(19, 2)
DETERMINISTIC
BEGIN
		RETURN(SELECT ROUND((SUM(sc.`grade`) / COUNT(c.`name`)), 1)
		FROM `students_courses` AS sc
        JOIN `courses` AS c ON sc.`course_id` = c.`id`
        JOIN `students` AS s ON sc.`student_id` = s.`id`
        WHERE c.`name` = course_name AND s.`is_graduated` = 1
        GROUP BY sc.`course_id`);
	END$$
        
        
#11. Graduate students
DELIMITER $$
CREATE PROCEDURE udp_graduate_all_students_by_year(start_year INT)
BEGIN 
		UPDATE `students` AS s
        JOIN `students_courses` AS sc ON s.`id` = sc.`student_id`
        JOIN `courses` AS c ON sc.`course_id` = c.`id`
        SET s.`is_graduated` = 1
        WHERE YEAR(c.`start_date`) = start_year;
	END$$
        
        
        


